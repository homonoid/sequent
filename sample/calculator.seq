obj Infix op lhs rhs
obj Prefix op val
obj Number val -> to-num val
obj Operator op

fn lex consume `[1-9]`, *`[0-9]` -> Number _
fn lex consume `[+\-*/]`, * -> Operator _
fn lex consume `[ \t\n]+`, * \ ignore spaces
fn lex _ -> die "Invalid syntax."

fn parse consume (Operator op), (Number val), * -> Prefix op val
fn parse consume *, (Operator op), * -> Binary op (parse left) (parse right)

fn eval (Prefix op |val=eval _|) ->
  case op
    "-" => -val
    "+" => +val
  else
    die "invalid prefix"

fn eval (Binary op |(lhs, rhs)=eval _|) ->
  case op
    "+" => lhs + rhs
    "-" => lhs - rhs
    "*" => lhs * rhs
    "/" => lhs / rhs

eval (apply (apply (read) lex) parse)
